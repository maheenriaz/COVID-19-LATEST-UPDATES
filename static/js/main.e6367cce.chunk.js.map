{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","hasError","data","loading","fetch","then","res","json","res2","console","log","setState","Countries","catch","err","this","from","opacity","to","style","load","className","id","data-example-id","backgroundColor","color","map","newdata","i","key","CountryCode","Country","Date","NewConfirmed","NewDeaths","TotalRecovered","TotalConfirmed","TotalDeaths","Component","fontSize","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mTAKMA,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,UAAU,EACVC,KAAK,GACLC,SAAS,GALC,E,qMAYZC,MAAM,sCACVC,MAAK,SAAAC,GAED,OAASA,EAAIC,UAEjBF,MAAK,SAAAG,GACHC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAET,KAAMM,EAAKI,UAAWT,SAAS,OAEjDU,OAAM,SAAAC,GACJL,QAAQC,IAAII,M,gIAMlB,OAAGC,KAAKf,MAAMG,QACL,6BACD,kBAAC,SAAD,CACEa,KAAM,CAAEC,QAAS,GACjBC,GAAI,CAAED,QAAS,KACd,SAAAlB,GAAK,OAAI,yBAAKoB,MAAOpB,GAAO,wBAAIoB,MAAOC,GAAX,+BAOzB,yBAAKC,UAAU,OAEL,6BACK,yBAAKA,UAAU,yBACvB,wBAAIC,GAAG,OAAM,mEAGpB,yBAAKD,UAAU,uBAAuBE,kBAAgB,iBAC/C,2BAAOF,UAAU,kDAEX,+BACK,wBAAIF,MAAO,CAACK,gBAAgB,YAAYC,MAAM,UAC7C,iDACC,oCACA,6CACC,0CACC,+CACC,gDACA,8CAIGV,KAAKf,MAAME,KAAKwB,KAAI,SAACC,EAAQC,GAAT,OAClB,2BAAOC,IAAKF,EAAQG,aACjB,4BACC,wBAAIX,MAAO,CAACK,gBAAgB,UAAUC,MAAM,UAAU,2BAAIE,EAAQI,UAClE,wBAAIZ,MAAO,CAACK,gBAAgB,YAAYC,MAAM,UAAWE,EAAQK,MACjE,wBAAIb,MAAO,CAACK,gBAAgB,aAAaC,MAAM,UAAWE,EAAQM,cAClE,wBAAId,MAAO,CAACK,gBAAgB,SAASC,MAAM,UAAWE,EAAQO,WAC9D,wBAAIf,MAAO,CAACK,gBAAgB,aAAaC,MAAM,UAAWE,EAAQQ,gBAClE,wBAAIhB,MAAO,CAACK,gBAAgB,YAAYC,MAAM,UAAWE,EAAQS,gBACjE,wBAAIjB,MAAO,CAACK,gBAAgB,UAAUC,MAAM,UAAWE,EAAQU,qBAWtF,kC,GAnFPC,aA6FZlB,EAAK,CACTmB,SAAS,OACTC,UAAU,UAEG1C,IC1FK2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.e6367cce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {Spring} from 'react-spring/renderprops'\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            hasError: false,\n            data:[],\n            loading: true\n\n        }\n       \n    }\n\nasync    componentDidMount(){\n    await fetch(\"https://api.covid19api.com/summary\")\n     .then(res=>{\n        \n          return   res.json()\n     })\n     .then(res2=>{\n        console.log(res2);\n        this.setState({ data: res2.Countries ,loading: false})\n    })\n     .catch(err=>{\n        console.log(err);\n     })\n     }\n     \nrender() {\n\n  if(this.state.loading){\n    return <div>\n          <Spring\n            from={{ opacity: 0 }}\n            to={{ opacity: 1 }}>\n            {props => <div style={props}><h1 style={load}>ðŸ˜„Loading...</h1></div>}\n          </Spring>\n            </div>\n  }\n \n        return (\n          \n                <div className=\"App\">\n                     \n                          <div>\n                               <div className=\"col-md-12 text-center\">\n                       <h1 id=\"hed\"><b>COVID'19 LIVE UPDATES OF THE WORLD</b></h1>\n                       </div>\n                       \n                <div className=\"bs-example container\" data-example-id=\"striped-table\">\n                       <table className=\"table table-striped table-bordered table-hover\">\n                       \n                             <thead>\n                                  <tr style={{backgroundColor:'lightGrey',color:'white'}}>\n                                   <th>Name Of Countries</th>\n                                    <th>Date</th>\n                                    <th>New Confirmed</th>\n                                     <th>New Deaths</th>\n                                      <th>Total Recovered</th>\n                                       <th>Total Confirmed </th>\n                                       <th>Total Deaths</th>\n                                    </tr>\n                              </thead>\n                                        {\n                                          this.state.data.map((newdata,i)=>(\n                                            <tbody key={newdata.CountryCode}>\n                                               <tr >\n                                                <td style={{backgroundColor:'#B833C8',color:'white'}}><b>{newdata.Country}</b></td>\n                                                <td style={{backgroundColor:'lightBlue',color:'black'}}>{newdata.Date}</td>\n                                                <td style={{backgroundColor:'lightGreen',color:'black'}}>{newdata.NewConfirmed}</td>\n                                                <td style={{backgroundColor:'orange',color:'black'}}>{newdata.NewDeaths}</td>\n                                                <td style={{backgroundColor:'lightGreen',color:'black'}}>{newdata.TotalRecovered}</td>\n                                                <td style={{backgroundColor:'lightBlue',color:'black'}}>{newdata.TotalConfirmed}</td>\n                                                <td style={{backgroundColor:'#B833C8',color:'black'}}>{newdata.TotalDeaths}</td>\n\n                                               </tr>\n                                             </tbody>\n                                             ))\n                                         }\n                        </table>\n                 </div>\n                          </div>\n                    \n                \n                         <br></br>                      \n                                              \n                </div>\n\n\n           \n        )\n    }\n}\n\nconst load={\n  fontSize:'50px',\n  textAlign:'center',\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}